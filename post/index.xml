<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 小鱼儿的小站</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on 小鱼儿的小站</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    
	<atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/css-margin%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/css-margin%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</guid>
      <description>前言 CSS 里有一个重要的东西，叫 CSS 盒模型，它几乎能贯穿我们学习 CSS 的整个阶段，如下图所示，就是我们所说的盒子模型：
[!]()
(注：图片来源 MDN )
&amp;ldquo;盒模型&amp;rdquo;中最外层透明的区域就是 margin所在，它会将其他区域从盒子模型内容中推开。
margin 一共有四个属性值， margin-top 、margin-right 、margin-bottom 和 margin-left 属性，也可以设置简写属性 margin。
margin 看起来比较简单，但是，它其实有自己的奥妙所在，比如我们在布局中经常遇到 margin 重叠效果等，接下来我们来看看 margin 究竟有什么神奇所在吧。
margin 重叠 margin 重叠指的是垂直重叠，重叠的意思是，当我们规定一个模块的 margin-bottom 与 紧邻着的下一个模块的 margin-top 它们会发生重叠，它们之间不会出现较大的空白。因为代码会取两个值之间较大的那个，比如 第一个模块设置margin-bottom: 50px ，第二个模块设置 margin-top: 100px 那么第一个模块的 margin-bottom 则不会起作用，起作用的则是 第二个模块的 margin-top 也就是说他们之间的空白间距是 100px ，可能会有疑问，那 50px 跑哪里去了，其实是被包含在 100px 里面了 这就是所谓的 margin 重叠。
以下情况下，margin 会发生重叠：
 相邻的兄弟元素 完全空盒子 父元素与它的第一个或最后一个子元素  相邻的兄弟元素重叠 上述我们所描绘的情况就是相邻兄弟之间的 margin 重叠。
如下示例，有三个 div 元素。第一个 div 的顶部与底部的 margin 分别是 50px 第二个 div 的顶部与底部 margin 分别是 20px ，第三个 div 的顶部与底部 margin 是 3em。 那么出现的重叠情况是，第一个与第二个的间距是 50px, 因为第二个元素的顶部小于第一个底部的 margin，取两者之间较大的。第二个元素与第三个元素之间的间距则是 3em ，同理 3em 大于第二个元素的 底部 20px。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/html%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/html%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>HTML (英语：HyperText Markup Language) 超文本编辑语言，是整个网站的基石，所以学好 HTML 非常重要，并且我们要学会使用 语义化的标签来书写 HTML 标签，接下来我们来一一介绍 HTML 标签。
首先来了解下 W3C 和 MDN
W3C 简介 w3c 是什么？ 万维网联盟 (英语：World Wide Web Consortium，缩写是 W3C )，由李爵士 (蒂姆·伯纳斯-李) 于1994年创立。
W3C 标准制定 为解决网络中应用中不同平台、技术和开发者带来的不兼容问题，保障网络信息的顺利和完整流通，万维网制定了一系列标准并督促网络应用开发者和内容提供者遵循这些标准。W3C 制定的网络标准并非强制，只是推荐标准。现在浏览器厂商基本都是基于这些标准解析网页。
MDN 简介 MDN Web Docs (旧称MozillaDeveloper Network、Mozilla Developer Center, 简称MDN) 是汇集众多网络技术开发文档的免费网站。
该项目于2005年，最初是由Mozilla(网景) 公司员工创建。
HTML 简介  HTML 的版本
 HTML 4.01 XHTML HTML5 HTML5.1  规范文档
 由 W3C 写文档  DOCTYPE
 用来选择文档类型 除了 HTML5 的 DOCTYPE，比较方便，其他请参考 https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/css%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/css%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F/</guid>
      <description>CSS是什么？ CSS，层叠样式表(英语：Cascading Style Sheets)，是一种用来为结构化文档 (如：HTML文档) 添加样式 (字体、颜色、间距等) 的计算机语言，由 W3C 定义和维护。当前最新的版本是 CSS2.1，为W3C的推荐标准。CSS3(2011年) 已经被现代浏览器支持。
CSS发展历史  1994年哈肯.维姆.莱提出了CSS的最初建议。伯特.波斯加入一起设计CSS。 1997年初，W3C内组织了专门管CSS的工作组，其负责人是克里斯.里雷。 1998年5月W3C发表了CSS2，CSS2.1修改了CSS2中的一些错误，删除了其中不被支持的内容和增加了一些已有浏览器的扩展内容。 从2001年开始CSS被分为了多个单独的模块，统称为CSS3。这些模块有：  CSS 选择器 level 3 CSS 媒体查询 level 3 CSS Color level 3 ……   周边工具
 Less CSS 一种简化、功能更多的 CSS 语言 中文官网 英文官网 SASS 一种简化、功能更多的 CSS 语言 中文官网 Post CSS 一种 CSS 处理程序  CSS 学习资源  MDN 查询关键字，遇到不会的 CSS 属性就去查阅MDN CSS Tricks，可以根据属性搜索很多好看的CSS效果； Google: 阮一峰老师 css 张鑫旭大神的 240 多篇 CSS 博客 Codrops 炫酷 CSS 效果 CSS揭秘 CSS 2.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BA%92%E8%81%94%E7%BD%91%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>互联网的基石 www 的历史 WWW 全称 World Wide Web 翻译成中文则是 全世界范围网络。
如下图所示，简单的介绍下 www 的来历：
URL 解释
https://www.baidu.com/s?wd=hello#5
 https 协议 www.baidu.com 网址  .com .cn .net... 顶级域名(一级) baidu.com 二级域名 www.baidu.com 三级域名   请求与相应 请求与响应介绍： 通过命令的方式请求与返回
Chrome 如何查看请求内容  打开 Network(f12, 鼠标右键审查元素) 如下图:  2. 地址栏输入网址 3. 在 Network 点击 Request Headers 并点击 view sorce， 如图：
4. 可以看到我们所请求的内容了，如下图：
Chrome 查看响应内容  打开Network 与 请求一样 地址栏输入网址 选中一个响应的内容，查看 Response Headers ,点击 view source 如下图：  响应状态码  1xx 不经常用，了解即可 2xx 成功</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BB%80%E4%B9%88%E6%98%AF%E8%84%9A%E6%9C%AC/</guid>
      <description>什么是脚本？ 从一开始学代码时，就有同学跟我说，「我今晚要写个脚本，然后实现一个什么东西。。。」，当时的我一脸懵逼，今天通过一个小小的例子来简单的认识下脚本；
我们通常把 Javascript 语言也叫做 「脚本语言」，所谓脚本其实就是，我们给计算机设置好一定的命令和程序，计算机按照我们所说的进行输出，这就是一个脚本。例如：
cd ~/Desktop mkdir test cd test echo &#39;您好&#39; &amp;gt; txt.txt  上述命令就是一个脚本。
写一个脚本  找一个文件目录，后缀名可以随意，但是一般是 .sh 结尾，我们在桌面上创建
 mkdir test cd test 必须进入你所创建的目录哦 touch demo.txt  编辑 demo.txt 内容如下：
mkdir demo cd demo mkdir js css touch index.html css/style.css js/main.js exit  mv demo.txt demo.sh 修改后缀名为 .sh
 mac 用户需要给 demo.txt 添加执行权限 chmod +x demo.txt
 在任意位置运行 sh ~/Desktop/demo.sh 即可运行脚本
  如果运行完成的话，我们可以看到在运行的目录里会多出一个 demo 的文件目录，那么刚才我们写的就是一个 Bash 脚本了。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E5%88%9D%E5%A7%8B%E5%91%BD%E4%BB%A4%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E5%88%9D%E5%A7%8B%E5%91%BD%E4%BB%A4%E8%A1%8C/</guid>
      <description>命令行速记  创建目录 mkdir &amp;quot;目录名字&amp;quot;， 目录名字可以不加引号，也可加，假如目录是有特殊标记的，比如带空格的名字，需要添加引号； 进入目录 cd &amp;quot;目录名字&amp;quot; pwd 显示当前所在目录的绝对路径 创建目标路径，mkdir -p 目录路径  如想在想在 demo01 下创建一个 demo-02 的目录，两种方法 一种是通过 mkdir 先创建 demo01 再在 demo01 里创建 demo02 ，另一种 mkdir -p /demo01/demo02 就可以；  whoami 查询当前用户   查看当前文件路径 ls 路径， 路径就是单独要跳转到那个目录下，如果不加就是当前的
 查看路径(包含隐藏路径) ls -a 路径，包含 . 与 ..
 查看路径，包含详细信息 ls -l
 ls -al 查看路径详细信息，包括隐藏目录和隐藏文件；
 创建文件 echo &#39;文件内容&#39; &amp;gt; 文件路径 ；
 强制创建文件 echo &#39;文件内容&#39; &amp;gt;!</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>命令行基本操作 在进行命令行操作之前，先认识几个单词：
   英文 中文 命令简写     file 文件 file   make 制作 mk   remove 删除 rm   move 移动 mv   copy 复制 cp   list 列表 ls   link 链接 ln   find 查找 find   echo 回声 echo   touch 触摸 touch   change directory 改变目录 cd   recursive 递归的 r   fource 强制 f         以上就是平时操作的一些基本命令，只要记得住简写，明白其中意思即可，接下来我们把这些命令简写组合在一起，看看会发生那些操作吧。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4%E5%88%9D%E5%AD%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E5%B8%B8%E7%94%A8%E7%9A%84git%E5%91%BD%E4%BB%A4%E5%88%9D%E5%AD%A6/</guid>
      <description>在工作中，经常用到 git , 不管托管在 gitHub 还是 gitLab 或者 码云，平时都是用可视化工具进行提交、推送，并没有用太多的命令进行操作。作为一个程序员，当然要学会用命令做东西啦，简单的记录下 git 日常命令，如果需要了解更多，请点击文章最下方链接进行访问。
配置 GItHub  首先进入gitHub ssh设置页 https://github.com/settings/keys 如果页面里面已经有了 可以点击 「delete」按钮把这些 key 先删除掉 点击 New SSH key ，进行创建，需要输入Title 和 Key , 我们目前没有 key , 往下看； 打开命令行工具 复制并运行 rm -rf ~/.ssh/* 把现有的 ssh key 都删除掉，注意不要打错一个字母哦; 按回车三次，直到结束命令 运行 cat ~/.ssh/id_rsa.pub ，得到一串代码，完整的复制这串代码； 粘贴在我们创建的 gitHub Key 中，然后点击 Add SSH key 回到命令行工具，运行 ssh -T git@github.com 如果您看到 Hi jinchao1992! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84/</guid>
      <description>为什么要学习计算机基础  因为你首先是程序员，其次才是前端
  硬件与软件：计算机的运行原理 (《编码》) 最大的软件： 操作系统 自己写的软件：数据结构 &amp;amp; 算法 (《数据结构与算法分析》) (排序算法) 多人写软件：软件工程 (《代码大全》)  前端为什么要学习计算机基础  操作系统运行在硬件上； 浏览器运行在操作系统上； HL/CSS/JS 运行在浏览器里； HTML/CSS/JS 和数据都运行在服务器上；  计算机就是一个二进制的世界(0和1)  1代表充电成功，0代表不充电
 十进制转换二进制，以10的几次方为底，转换为2的几次方为底;比如：
 37 十进制的做法是 3*10^1 + 7*10^0 = 37;
 转换二进制则为：1*2^5 + 0*2^4 + 0*2^3 + 1*2^2 + 0*2^1 + 1*2^0 所以为：100101;
 切记二进制里只有0和1没有别的存在；
   计算机存储  内存如何存储 0 和 1，1 代表充电 0 代表不充电； 如何存储数字，十进制变化为二进制，进行存储；
 负数会以补码的方式进行存储； 小数会以浮点数的形式进行存储；  如何存储字符, 将每个字符编号，通过ASCll 美国信息交换标准代码，如下图：</description>
    </item>
    
  </channel>
</rss>